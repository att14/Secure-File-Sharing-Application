
import java.awt.Container;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import java.io.*;
import java.security.*;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Hashtable;
import javax.swing.JOptionPane;

/*
 * FileOpFrame.java
 *
 * Created on Feb 8, 2011, 4:58:44 PM
 *
 * @author CJ
 */
public class FileOpFrame extends ClientGUI implements java.io.Serializable {

    private String server;
    private int port;

    /** Creates new form FileOpFrame */
    public FileOpFrame(JFrame parent, UserToken token, HashMap keys, GroupClient groupClient,
            String serverName, int portNum, String uname) {
        super(parent, token);
        server = serverName;
        port = portNum;
        fileKeys = keys;
        gClient = groupClient;
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextField1 = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        downButton = new javax.swing.JButton();
        upButton = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        fileServerField = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        portNumField = new javax.swing.JTextField();
        backButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        serverNameField = new javax.swing.JTextField();

        jTextField1.setText("jTextField1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setName("ConSucFrame"); // NOI18N

        jLabel2.setText("Choose a file server and select an action.");

        downButton.setText("Download/Delete");
        downButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                downButtonActionPerformed(evt);
            }
        });

        upButton.setText("Upload");
        upButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                upButtonActionPerformed(evt);
            }
        });

        jLabel3.setText("File Server:");

        fileServerField.setText("localhost");
        fileServerField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileServerFieldActionPerformed(evt);
            }
        });

        jLabel4.setText("Port:");

        portNumField.setText("4321");

        backButton.setText("Back");
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });

        jLabel1.setText("Server Name:");

        serverNameField.setText("home");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(backButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(downButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(upButton))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel1)
                            .addComponent(jLabel4))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(portNumField, javax.swing.GroupLayout.DEFAULT_SIZE, 233, Short.MAX_VALUE)
                            .addComponent(serverNameField, javax.swing.GroupLayout.DEFAULT_SIZE, 233, Short.MAX_VALUE)
                            .addComponent(fileServerField, javax.swing.GroupLayout.DEFAULT_SIZE, 233, Short.MAX_VALUE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(fileServerField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(serverNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(portNumField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(downButton)
                    .addComponent(backButton)
                    .addComponent(upButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void downButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_downButtonActionPerformed
        String fileServer = fileServerField.getText();
        String serverName = serverNameField.getText();
        int filePort = Integer.parseInt(portNumField.getText());
        int ver;
        FileClient fClient = new FileClient();

        //attempt file client/server connection
        if (fClient.connect(fileServer, filePort)) {
            try {
                System.out.println("Getting key");
                File trustedFile = new File("trusted.bin");


                if (trustedFile.exists()) {
                    ObjectInputStream ois = new ObjectInputStream(new FileInputStream(trustedFile));
                    @SuppressWarnings("unchecked")
                    Hashtable<String, PublicKey> trustedTable = (Hashtable<String, PublicKey>) ois.readObject();
                    ois.close();
                    if (trustedTable.containsKey(serverName)) {
                        // server trusted
                        fClient.getFingerprint();
                        if (trustedTable.get(serverName).equals(fClient.getKey())) {
                            System.out.println("Sharing AES key");
                            if (fClient.shareAESkey()) {
                                // get new token and send to file server for verification
                                userToken = gClient.getToken(userToken.getSubject(), fileServer); // gets the token from the groupserver to send to the fileserver

                                System.out.println("Sending token");
                                if (!fClient.sendToken(userToken)) {
                                    fClient.disconnect();
                                    System.err.println("File Server Verification Failed.");
                                    return;
                                }

                                DownDelFrame dFrame = new DownDelFrame(parentFrame, userToken, fileKeys, fClient, fileServer, filePort);
                                dFrame.pack();
                                dFrame.setVisible(true);
                                return;
                            } else {
                                System.err.println("Key sharing failed");
                            }
                            // servers public key does not match
                        } else {
                            // prompt user for fingerprint verification
                            ver = keyVerification(fClient, serverName);

                            if (ver == 2) {
                                trustedTable.put(serverName, fClient.getKey());

                                trustedFile.delete();
                                trustedFile = new File("trusted.bin");
                                trustedFile.createNewFile();

                                ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(trustedFile));
                                oos.writeObject(trustedTable);
                                oos.close();

                                System.out.println("Sharing AES key");
                                if (fClient.shareAESkey()) {
                                    // get new token and send to file server for verification
                                    userToken = gClient.getToken(userToken.getSubject(), fileServer); // gets the token from the groupserver to send to the fileserver

                                    System.out.println("Sending token");
                                    if (!fClient.sendToken(userToken)) {
                                        fClient.disconnect();
                                        System.err.println("File Server Verification Failed.");
                                        return;
                                    }

                                    DownDelFrame dFrame = new DownDelFrame(parentFrame, userToken, fileKeys, fClient, fileServer, filePort);
                                    dFrame.pack();
                                    dFrame.setVisible(true);
                                    return;
                                } else {
                                    System.err.println("Key sharing failed");
                                }
                            } else {
                                fClient.disconnect();
                            }
                        }
                        // server not found in table, ask if trusted and add
                    } else {
                        ver = keyVerification(fClient, serverName);

                        if (ver == 2) {
                            trustedTable.put(serverName, fClient.getKey());

                            trustedFile.delete();
                            trustedFile = new File("trusted.bin");
                            trustedFile.createNewFile();

                            ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(trustedFile));
                            oos.writeObject(trustedTable);
                            oos.close();

                            System.out.println("Sharing AES key");
                            if (fClient.shareAESkey()) {

                                // get new token and send to file server for verification
                                userToken = gClient.getToken(userToken.getSubject(), fileServer); // gets the token from the groupserver to send to the fileserver

                                System.out.println("Sending token");
                                if (!fClient.sendToken(userToken)) {
                                    fClient.disconnect();
                                    System.err.println("File Server Verification Failed.");
                                    return;
                                }

                                DownDelFrame dFrame = new DownDelFrame(parentFrame, userToken, fileKeys, fClient, fileServer, filePort);
                                dFrame.pack();
                                dFrame.setVisible(true);
                                return;
                            } else {
                                System.err.println("Key sharing failed");
                            }
                        } else {
                            fClient.disconnect();
                        }

                    }

                    // file DNE
                } else {
                    Hashtable<String, PublicKey> trustedTable = new Hashtable<String, PublicKey>();
                    ver = keyVerification(fClient, serverName);

                    // if user accepts fingerprint create file and add hashtable, otherwise disconnect
                    if (ver == 2) {
                        trustedTable.put(serverName, fClient.getKey());

                        trustedFile = new File("trusted.bin");
                        trustedFile.createNewFile();

                        ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(trustedFile));
                        oos.writeObject(trustedTable);
                        oos.close();

                        System.out.println("Sharing AES key");
                        if (fClient.shareAESkey()) {
                            // get new token and send to file server for verification
                            userToken = gClient.getToken(userToken.getSubject(), fileServer); // gets the token from the groupserver to send to the fileserver

                            System.out.println("Sending token");
                            if (!fClient.sendToken(userToken)) {
                                fClient.disconnect();
                                System.err.println("File Server Verification Failed.");
                                return;
                            }

                            DownDelFrame dFrame = new DownDelFrame(parentFrame, userToken, fileKeys, fClient, fileServer, filePort);
                            dFrame.pack();
                            dFrame.setVisible(true);
                            return;
                        } else {
                            System.err.println("Key sharing failed");
                        }
                    } else {
                        fClient.disconnect();
                    }
                }
            } catch (IOException ex) {
                Logger.getLogger(FileOpFrame.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ClassNotFoundException cnfe) {
                Logger.getLogger(FileOpFrame.class.getName()).log(Level.SEVERE, null, cnfe);
            }
        } else {
            System.err.println("File Client connection failure");
        }
    }//GEN-LAST:event_downButtonActionPerformed

    private void upButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_upButtonActionPerformed
        String fileServer = fileServerField.getText();
        int filePort = Integer.parseInt(portNumField.getText());
        int ver;
        String serverName = serverNameField.getText();
        FileClient fClient = new FileClient();

        //attempt file client/server connection
        if (fClient.connect(fileServer, filePort)) {

            System.out.println("Getting key");
            File trustedFile = new File("trusted.bin");

            if (trustedFile.exists()) {
                try {
                    ObjectInputStream ois = new ObjectInputStream(new FileInputStream(trustedFile));
                    @SuppressWarnings("unchecked")
                    Hashtable<String, PublicKey> trustedTable = (Hashtable<String, PublicKey>) ois.readObject();
                    ois.close();
                    if (trustedTable.containsKey(serverName)) {
                        // server trusted
                        fClient.getFingerprint();
                        if (trustedTable.get(serverName).equals(fClient.getKey())) {
                            System.out.println("Sharing AES key");
                            if (fClient.shareAESkey()) {
                                // get new token and send to file server for verification
                                userToken = gClient.getToken(userToken.getSubject(), fileServer); // gets the token from the groupserver to send to the fileserver

                                System.out.println("Sending token");
                                if (!fClient.sendToken(userToken)) {
                                    fClient.disconnect();
                                    System.err.println("File Server Verification Failed.");
                                    return;
                                }

                                UpFrame uFrame = new UpFrame(parentFrame, userToken, fClient, fileKeys);
                                uFrame.pack();
                                uFrame.setVisible(true);
                                return;
                            } else {
                                System.err.println("Key sharing failed");
                            }
                            // servers public key does not match
                        } else {
                            ver = keyVerification(fClient, serverName);

                            if (ver == 2) {
                                trustedTable.put(serverName, fClient.getKey());
                                trustedFile.delete();
                                trustedFile = new File("trusted.bin");
                                trustedFile.createNewFile();
                                ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(trustedFile));
                                oos.writeObject(trustedTable);
                                oos.close();

                                System.out.println("Sharing AES key");
                                if (fClient.shareAESkey()) {

                                    // get new token and send to file server for verification
                                    userToken = gClient.getToken(userToken.getSubject(), fileServer);

                                    if (!fClient.sendToken(userToken)) {
                                        fClient.disconnect();
                                        System.err.println("File Server Verification Failed.");
                                        return;
                                    }


                                    UpFrame uFrame = new UpFrame(parentFrame, userToken, fClient, fileKeys);
                                    uFrame.pack();
                                    uFrame.setVisible(true);
                                    return;
                                } else {
                                    System.err.println("Key sharing failed");
                                }
                            } else {
                                fClient.disconnect();
                            }
                        }
                        // servers public key does not match
                        // server not found in table, ask if trusted and add
                    } else {
                        ver = keyVerification(fClient, serverName);

                        if (ver == 2) {
                            trustedTable.put(serverName, fClient.getKey());
                            trustedFile.delete();
                            trustedFile = new File("trusted.bin");
                            trustedFile.createNewFile();
                            ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(trustedFile));
                            oos.writeObject(trustedTable);
                            oos.close();
                            System.out.println("Sharing AES key");
                            if (fClient.shareAESkey()) {
                                // get new token and send to file server for verification
                                userToken = gClient.getToken(userToken.getSubject(), fileServer); // gets the token from the groupserver to send to the fileserver

                                System.out.println("Sending token");
                                if (!fClient.sendToken(userToken)) {
                                    fClient.disconnect();
                                    System.err.println("File Server Verification Failed.");
                                    return;
                                }

                                UpFrame uFrame = new UpFrame(parentFrame, userToken, fClient, fileKeys);
                                uFrame.pack();
                                uFrame.setVisible(true);
                                return;
                            } else {
                                System.err.println("Key sharing failed");
                            }
                        } else {
                            fClient.disconnect();
                        }
                    }
                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(FileOpFrame.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IOException ex) {
                    Logger.getLogger(FileOpFrame.class.getName()).log(Level.SEVERE, null, ex);
                }

                // file DNE
            } else {
                Hashtable<String, PublicKey> trustedTable = new Hashtable<String, PublicKey>();
                ver = keyVerification(fClient, serverName);

                // if user accepts fingerprint create file and add hashtable, otherwise disconnect
                if (ver == 2) {
                    try {
                        trustedTable.put(serverName, fClient.getKey());
                        trustedFile = new File("trusted.bin");
                        trustedFile.createNewFile();
                        ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(trustedFile));
                        oos.writeObject(trustedTable);
                        oos.close();
                        System.out.println("Sharing AES key");
                        if (fClient.shareAESkey()) {
                            // get new token and send to file server for verification
                            userToken = gClient.getToken(userToken.getSubject(), fileServer); // gets the token from the groupserver to send to the fileserver

                            System.out.println("Sending token");
                            if (!fClient.sendToken(userToken)) {
                                fClient.disconnect();
                                System.err.println("File Server Verification Failed.");
                                return;
                            }

                            UpFrame uFrame = new UpFrame(parentFrame, userToken, fClient, fileKeys);
                            uFrame.pack();
                            uFrame.setVisible(true);
                            return;
                        } else {
                            System.err.println("Key sharing failed");
                        }
                    } catch (IOException ex) {
                        Logger.getLogger(FileOpFrame.class.getName()).log(Level.SEVERE, null, ex);
                    }
                } else {
                    fClient.disconnect();
                }
            }
        } else {
            System.err.println("File Client connection failure");
        }
    }//GEN-LAST:event_upButtonActionPerformed

    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed
        if (userToken.getGroups().contains("ADMIN")) {
            AdminGroupFrame agFrame = new AdminGroupFrame(parentFrame, userToken, fileKeys, gClient, server, port);
            Container agPane = agFrame.getContentPane();
            parentFrame.setContentPane(agPane);
            parentFrame.pack();
        } else {
            UserGroupFrame ugFrame = new UserGroupFrame(parentFrame, userToken, fileKeys, gClient, server, port);
            Container ugPane = ugFrame.getContentPane();
            parentFrame.setContentPane(ugPane);
            parentFrame.pack();
        }
    }//GEN-LAST:event_backButtonActionPerformed

    private int keyVerification(FileClient fClient, String serverName) {
        String uglyPrint = fClient.getFingerprint();
        String fingerprint = "";
        byte[] b = uglyPrint.getBytes();

        for (int i = 0; i < uglyPrint.length(); i++) {
            if (i == uglyPrint.length() - 1) {
                fingerprint += Integer.toString((b[i] & 0xff) + 0x100, 16).substring(1);
            } else {
                fingerprint += Integer.toString((b[i] & 0xff) + 0x100, 16).substring(1) + ":";
            }
        }

        String message = "The authenticity of host '" + serverName
                + "' can't be established.\n RSA key fingerprint is " + fingerprint
                + ".\nAre you sure you want to continue connecting?";
        Object[] options = {"Cancel", "No", "Yes"};

        int n = JOptionPane.showOptionDialog(this, message, "Server Authentication",
                JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE,
                null, options, options[2]);

        return n;
    }

    private void fileServerFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileServerFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fileServerFieldActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backButton;
    private javax.swing.JButton downButton;
    private javax.swing.JTextField fileServerField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField portNumField;
    private javax.swing.JTextField serverNameField;
    private javax.swing.JButton upButton;
    // End of variables declaration//GEN-END:variables
}
